package com.adp.control.actions;

import java.lang.reflect.Field;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.adp.business.services.MatchService;
import com.adp.entities.MatchEntity;
import com.adp.exceptions.ADPException;
import com.adp.utils.CollectionsUtil;
import com.adp.utils.DateUtils;


public class HomeAction extends AbstractAction{

	private static final long serialVersionUID = -1L;
	
	@Autowired
	private MatchService matchService;
	
	private List<MatchEntity> matchsA;
	private List<MatchEntity> matchsB;
	private List<MatchEntity> matchsC;
	private List<MatchEntity> matchsD;
	private List<MatchEntity> matchsQF;
	private List<MatchEntity> matchsDF;
	private List<MatchEntity> matchsP;
	private List<MatchEntity> matchsF;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public String execute()
	{
		matchsA = new ArrayList<MatchEntity>();
		matchsB = new ArrayList<MatchEntity>();
		matchsC = new ArrayList<MatchEntity>();
		matchsD = new ArrayList<MatchEntity>();
		matchsQF = new ArrayList<MatchEntity>();
		matchsDF = new ArrayList<MatchEntity>();
		matchsP = new ArrayList<MatchEntity>();
		matchsF = new ArrayList<MatchEntity>();
		
		try {
			List<MatchEntity> matchs = matchService.chargerProchainsMatchs();
			Calendar now = Calendar.getInstance();
			Calendar nextDateCal = null;
			if(CollectionsUtil.isNotEmpty(matchs)){
				for (MatchEntity matchEntity : matchs) {
					Calendar matchCal = Calendar.getInstance();
					try {
						Date matchDate = DateUtils.getDateFromText(matchEntity.getDateDeb(), "dd/MM/yyyy HH:mm");
						matchCal.setTime(matchDate);
						if(now.compareTo(matchCal) >= 0)
							continue;
						if(nextDateCal == null || (matchCal.compareTo(nextDateCal) <= 0)){
							nextDateCal = matchCal;
						}
					} catch (ParseException e) {
						continue;
					}
				}
				
				if(nextDateCal != null){
					String nexDateAsString = DateUtils.getFormattedDate(nextDateCal.getTime(), "dd/MM/yyyy");
					for (MatchEntity matchEntity : matchs) {
						if(matchEntity.getDateDeb() != null && matchEntity.getDateDeb().substring(0, 10).equals(nexDateAsString)){
							try {
								Field listField = this.getClass().getDeclaredField("matchs"+matchEntity.getPool().getNom());
								((List)((listField).get(this))).add(matchEntity);
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}
				}
				
			}
		} catch (ADPException e) {
			// Nothing.
		}	
		return SUCCESS;		
	}

	public List<MatchEntity> getMatchsA() {
		return matchsA;
	}

	public void setMatchsA(List<MatchEntity> matchsA) {
		this.matchsA = matchsA;
	}

	public List<MatchEntity> getMatchsB() {
		return matchsB;
	}

	public void setMatchsB(List<MatchEntity> matchsB) {
		this.matchsB = matchsB;
	}

	public List<MatchEntity> getMatchsC() {
		return matchsC;
	}

	public void setMatchsC(List<MatchEntity> matchsC) {
		this.matchsC = matchsC;
	}

	public List<MatchEntity> getMatchsD() {
		return matchsD;
	}

	public void setMatchsD(List<MatchEntity> matchsD) {
		this.matchsD = matchsD;
	}

	public List<MatchEntity> getMatchsQF() {
		return matchsQF;
	}

	public void setMatchsQF(List<MatchEntity> matchsQF) {
		this.matchsQF = matchsQF;
	}

	public List<MatchEntity> getMatchsDF() {
		return matchsDF;
	}

	public void setMatchsDF(List<MatchEntity> matchsDF) {
		this.matchsDF = matchsDF;
	}

	public List<MatchEntity> getMatchsP() {
		return matchsP;
	}

	public void setMatchsP(List<MatchEntity> matchsP) {
		this.matchsP = matchsP;
	}

	public List<MatchEntity> getMatchsF() {
		return matchsF;
	}

	public void setMatchsF(List<MatchEntity> matchsF) {
		this.matchsF = matchsF;
	}

}
